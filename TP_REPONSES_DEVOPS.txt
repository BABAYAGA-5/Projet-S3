================================================================================
                    TP GLOBAL DEVOPS - R√âPONSES AUX QUESTIONS
================================================================================
Projet: Projet-S3 (Application JEE de gestion)
Repository: https://github.com/BABAYAGA-5/Projet-S3
Date: Octobre 2025
================================================================================

================================================================================
√âTAPE 1 : GITHUB - GESTION DU CODE SOURCE
================================================================================

Question 1: Quelle convention de branches avez-vous adopt√©e ?
----------------------------------------------------------------------------
Convention: GitFlow simplifi√©e
- main: Branche principale de production
- develop: Non utilis√©e dans ce projet (approche simplifi√©e)
- feature branches: Branches pour nouvelles fonctionnalit√©s (cr√©√©es au besoin)

Structure actuelle:
- main (branche principale et de production)
- Tous les commits sont faits directement sur main pour ce projet √©ducatif

Note: Pour un projet en production, nous recommandons:
  * main: Code de production stable
  * develop: Branche d'int√©gration
  * feature/*: Nouvelles fonctionnalit√©s
  * hotfix/*: Corrections urgentes
  * release/*: Pr√©paration des releases


Question 2: Montrez l'historique de commits et la politique de merge
----------------------------------------------------------------------------
Commits r√©cents:
- eb97b38: Revert automated SonarQube analysis - will run manually instead
- 6b46f1c: Add enhanced Grafana dashboard with comprehensive monitoring
- 6cafde6: Configure Jenkinsfile to use Minikube with automatic context update
- fe153da: Update Jenkinsfile for Docker Desktop Kubernetes configuration

Politique de merge:
- Commits directs sur main (approche simplifi√©e pour TP)
- Messages de commit descriptifs et en anglais
- Chaque modification majeure = 1 commit
- Push apr√®s chaque fonctionnalit√© compl√©t√©e

Pour voir l'historique complet:
  git log --oneline --graph --all


================================================================================
√âTAPE 2 : JENKINS - INT√âGRATION CONTINUE
================================================================================

Question 1: Le pipeline se d√©clenche-t-il automatiquement apr√®s chaque push ?
----------------------------------------------------------------------------
OUI - Configuration dans Jenkinsfile:

triggers {
    pollSCM('H/5 * * * *')  // V√©rifie le repo toutes les 5 minutes
}

M√©canisme:
- Jenkins v√©rifie GitHub toutes les 5 minutes
- Si des changements sont d√©tect√©s, le pipeline d√©marre automatiquement
- Alternative possible: Webhooks GitHub (non configur√© dans ce TP)


Question 2: Quelles √©tapes sont ex√©cut√©es et avec quels r√©sultats ?
----------------------------------------------------------------------------
√âtapes du pipeline Jenkinsfile:

1. Checkout
   - Clone le code depuis GitHub
   - R√©sultat: Code r√©cup√©r√© avec succ√®s

2. Configure Kubernetes
   - V√©rifie la connexion au cluster Minikube
   - Met √† jour le contexte kubectl
   - R√©sultat: Connexion √©tablie avec succ√®s

3. Build & Test
   - Compile le code Java avec Maven
   - Lance les tests unitaires
   - G√©n√®re le fichier WAR
   - R√©sultat: BUILD SUCCESS
   - Artefact: Projet_S3-1.0-SNAPSHOT.war

4. Docker Build & Push
   - Construit l'image Docker
   - Pousse l'image sur Docker Hub
   - R√©sultat: Image publi√©e - babayaga0/projet-s3:latest

5. Deploy to Kubernetes
   - Applique deployment.yaml, service.yaml, ingress.yaml
   - V√©rifie le d√©ploiement des pods
   - R√©sultat: Application d√©ploy√©e avec succ√®s

6. Deploy Monitoring Stack
   - D√©ploie Prometheus
   - D√©ploie Grafana
   - D√©ploie SonarQube
   - R√©sultat: Stack de monitoring op√©rationnel

7. Setup Grafana Dashboard
   - Configure le dashboard automatiquement
   - Importe la configuration JSON
   - R√©sultat: Dashboard disponible

8. SonarQube Analysis
   - Attend que SonarQube soit pr√™t
   - Note: Analyse manuelle recommand√©e
   - R√©sultat: SonarQube disponible pour analyse

9. Verify Deployment
   - V√©rifie tous les composants d√©ploy√©s
   - Liste les services et pods
   - R√©sultat: Tous les composants op√©rationnels


Question 3: Capturez le log du build
----------------------------------------------------------------------------
Exemple de log de build r√©ussi:

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] üì¶ Docker Image: babayaga0/projet-s3:latest
[INFO] üöÄ Kubernetes Pods: 3 pods running
[INFO] 
[INFO] üåê ACCESS YOUR SERVICES:
[INFO] ========================================
[INFO] Application:  http://localhost:30081
[INFO] Prometheus:   http://localhost:30090
[INFO] Grafana:      http://localhost:30300
[INFO]               Username: admin
[INFO]               Password: admin
[INFO] SonarQube:    http://localhost:30900
[INFO]               Username: admin
[INFO]               Password: admin
[INFO] ========================================

Dur√©e totale du build: ~3-5 minutes


================================================================================
√âTAPE 3 : SONARQUBE - QUALIT√â DU CODE
================================================================================

Question 1: Quel est votre score de qualit√© apr√®s analyse ?
----------------------------------------------------------------------------
R√©sultats de l'analyse SonarQube:

Projet: Projet S3 (JAVA_Projet_S3)
URL: http://127.0.0.1:53156/dashboard?id=JAVA_Projet_S3

M√©triques principales:
- Fichiers analys√©s: 74 fichiers
  * 39 fichiers Java
  * 1 fichier CSS
  * 2 fichiers XML
  * 32 fichiers HTML/JSP
  
- Langages d√©tect√©s: Java, CSS, JSP, XML

- Quality Gate: En attente de configuration

Commande d'analyse:
  cd D:\DevOps\Projet-S3
  .\run-sonar-analysis.ps1

Dur√©e d'analyse: ~38 secondes


Question 2: Quelles anomalies ont √©t√© corrig√©es ?
----------------------------------------------------------------------------
Note: L'analyse compl√®te est disponible dans le dashboard SonarQube.

Types d'issues g√©n√©ralement d√©tect√©es et corrig√©es:
1. Code Smells (Maintenabilit√©)
   - M√©thodes trop longues
   - Complexit√© cyclomatique √©lev√©e
   - Duplication de code

2. Bugs potentiels
   - Gestion des exceptions
   - Null pointer exceptions possibles
   - Ressources non ferm√©es

3. Vuln√©rabilit√©s de s√©curit√©
   - Injection SQL potentielle
   - Validation des entr√©es utilisateur
   - Gestion des sessions

Pour voir les d√©tails:
- Acc√©der au dashboard SonarQube
- Onglet "Issues" pour la liste compl√®te
- Filtrer par s√©v√©rit√© (Blocker, Critical, Major, Minor)


Question 3: Capturez le rapport Sonar
----------------------------------------------------------------------------
Le rapport est accessible √†:
http://127.0.0.1:53156/dashboard?id=JAVA_Projet_S3

Sections disponibles:
- Overview: Vue d'ensemble des m√©triques
- Issues: Liste d√©taill√©e des probl√®mes
- Security Hotspots: Points sensibles de s√©curit√©
- Measures: M√©triques d√©taill√©es
- Code: Exploration du code source
- Activity: Historique des analyses


================================================================================
√âTAPE 4 : DOCKER - CONTAINERISATION
================================================================================

Question 1: Quel est le contenu de votre Dockerfile ?
----------------------------------------------------------------------------
Fichier: D:\DevOps\Projet-S3\Dockerfile

FROM tomcat:10.1-jdk21

# Remove default webapps
RUN rm -rf /usr/local/tomcat/webapps/*

# Copy WAR file
COPY target/Projet_S3-1.0-SNAPSHOT.war /usr/local/tomcat/webapps/ROOT.war

# Expose port
EXPOSE 8080

# Start Tomcat
CMD ["catalina.sh", "run"]

Explications:
- Image de base: Tomcat 10.1 avec JDK 21
- Suppression des applications par d√©faut
- Copie du WAR compil√© comme application ROOT
- Exposition du port 8080
- D√©marrage automatique de Tomcat


Question 2: Quel est le nom et la version de votre image publi√©e ?
----------------------------------------------------------------------------
Image Docker Hub:
- Nom: babayaga0/projet-s3
- Tag: latest
- URL compl√®te: docker.io/babayaga0/projet-s3:latest

Pour pull l'image:
  docker pull babayaga0/projet-s3:latest

Pour voir les d√©tails:
  docker images babayaga0/projet-s3


Question 3: Donnez la commande de lancement
----------------------------------------------------------------------------
Commande pour lancer le conteneur localement:

docker run -d \
  --name projet-s3-app \
  -p 8080:8080 \
  babayaga0/projet-s3:latest

Options:
  -d: Mode d√©tach√© (background)
  --name: Nom du conteneur
  -p 8080:8080: Mapping du port h√¥te:conteneur

Pour v√©rifier:
  docker ps
  curl http://localhost:8080

Pour voir les logs:
  docker logs projet-s3-app

Pour arr√™ter:
  docker stop projet-s3-app


================================================================================
√âTAPE 5 : KUBERNETES - D√âPLOIEMENT
================================================================================

Question 1: Combien de pods ont √©t√© d√©ploy√©s ?
----------------------------------------------------------------------------
Pods d√©ploy√©s pour l'application principale:
- 3 replicas de l'application projet-s3

Pods d√©ploy√©s pour le monitoring:
- 1 pod Prometheus
- 1 pod Grafana
- 1 pod SonarQube

Total: 6 pods actifs dans le cluster

Configuration dans deployment.yaml:
  replicas: 3


Question 2: Donnez la commande et la sortie de kubectl get all
----------------------------------------------------------------------------
Commande:
  kubectl get all -l app=projet-s3

Sortie exemple:
NAME                             READY   STATUS    RESTARTS   AGE
pod/projet-s3-xxxxxxxxxx-xxxxx   1/1     Running   0          10m
pod/projet-s3-xxxxxxxxxx-xxxxx   1/1     Running   0          10m
pod/projet-s3-xxxxxxxxxx-xxxxx   1/1     Running   0          10m

NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
service/projet-s3   NodePort   10.96.xxx.xxx   <none>        8080:30081/TCP   10m

NAME                        READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/projet-s3   3/3     3            3           10m

NAME                                   DESIRED   CURRENT   READY   AGE
replicaset.apps/projet-s3-xxxxxxxxxx   3         3         3       10m

Pour voir tous les services:
  kubectl get all

Monitoring stack:
NAME                            READY   STATUS    RESTARTS   AGE
pod/prometheus-xxxxxxxxx-xxxxx  1/1     Running   0          15m
pod/grafana-xxxxxxxxx-xxxxx     1/1     Running   0          15m
pod/sonarqube-xxxxxxxxx-xxxxx   1/1     Running   0          15m

NAME                 TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)
service/prometheus   NodePort   10.96.xxx.xxx    <none>        9090:30090/TCP
service/grafana      NodePort   10.106.xxx.xxx   <none>        3000:30300/TCP
service/sonarqube    NodePort   10.96.xxx.xxx    <none>        9000:30900/TCP


Question 3: Fournissez l'URL de l'application d√©ploy√©e
----------------------------------------------------------------------------
URLs d'acc√®s (via Minikube):

Application principale:
  - Via Minikube service: minikube service projet-s3 --url
  - Via NodePort: http://localhost:30081
  - Commande: kubectl port-forward svc/projet-s3 8080:8080

Monitoring:
  - Prometheus: http://localhost:30090
  - Grafana: http://localhost:30300
  - SonarQube: http://localhost:30900 (ou port dynamique via minikube service)

Pour obtenir les URLs Minikube:
  minikube service list
  minikube service projet-s3 --url
  minikube service grafana --url

Fichiers de configuration:
- k8s/deployment.yaml: Configuration des pods et replicas
- k8s/service.yaml: Exposition du service (NodePort 30081)
- k8s/ingress.yaml: Configuration Ingress (optionnel)


================================================================================
√âTAPE 6 : PROMETHEUS & GRAFANA - SUPERVISION
================================================================================

Question 1: Fournissez une capture de votre dashboard
----------------------------------------------------------------------------
Dashboard Grafana: "Projet S3 - Application Monitoring"
URL: http://127.0.0.1:30300 (via minikube service grafana --url)

Login:
  Username: admin
  Password: admin

Le dashboard contient les panels suivants:

1. Application Health
   - Status actuel de l'application
   - Disponibilit√© en temps r√©el

2. CPU Usage
   - Utilisation CPU par pod
   - Moyenne sur tous les pods

3. Memory Usage
   - Utilisation m√©moire par pod
   - Pourcentage d'utilisation

4. Network Traffic
   - Trafic entrant/sortant
   - Octets re√ßus et transmis

5. Pod Status
   - Nombre de pods running
   - Pods failed/pending

6. Request Rate
   - Nombre de requ√™tes par seconde
   - √âvolution dans le temps

7. Response Time
   - Temps de r√©ponse moyen
   - Percentiles (p50, p95, p99)

8. Error Rate
   - Taux d'erreurs HTTP
   - Codes d'erreur (4xx, 5xx)

9. Database Connections
   - Connexions actives
   - Pool de connexions

10. JVM Metrics
    - Heap memory usage
    - Garbage collection
    - Thread count

Configuration:
- Fichier: docs/projet-s3-dashboard.json
- Provisioning automatique via Jenkinsfile
- Datasource: Prometheus (http://prometheus:9090)


Question 2: Quelle m√©trique avez-vous choisie comme KPI principale ? Pourquoi ?
----------------------------------------------------------------------------
KPI Principale: Disponibilit√© de l'application (Application Uptime)

Justification:
1. Criticit√© Business
   - La disponibilit√© impacte directement l'exp√©rience utilisateur
   - Toute indisponibilit√© = perte de revenus potentielle

2. Indicateur global
   - Refl√®te la sant√© g√©n√©rale du syst√®me
   - Agr√®ge plusieurs m√©triques (CPU, m√©moire, r√©seau)

3. Facilit√© de compr√©hension
   - M√©trique binaire simple: UP/DOWN
   - Compr√©hensible par tous les stakeholders

4. Alerting facile
   - Seuil clair: < 99.9% = alerte
   - D√©tection rapide des incidents

KPIs secondaires importants:
- Temps de r√©ponse moyen: < 500ms (performance utilisateur)
- Taux d'erreur: < 0.1% (qualit√© de service)
- Utilisation CPU: < 80% (capacit√© syst√®me)
- Utilisation m√©moire: < 85% (stabilit√©)


Question 3: Quelles alertes pouvez-vous envisager ?
----------------------------------------------------------------------------
Alertes critiques (Priority: P1):

1. Application Down
   - Condition: up{job="projet-s3"} == 0
   - Dur√©e: > 1 minute
   - Action: Notification imm√©diate + PagerDuty

2. Pod Crash Loop
   - Condition: kube_pod_container_status_restarts_total > 5
   - Dur√©e: > 5 minutes
   - Action: Investigation imm√©diate

3. High Error Rate
   - Condition: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
   - Dur√©e: > 2 minutes
   - Action: Escalade √©quipe on-call

Alertes importantes (Priority: P2):

4. High CPU Usage
   - Condition: container_cpu_usage_seconds_total > 80%
   - Dur√©e: > 10 minutes
   - Action: V√©rification scaling

5. High Memory Usage
   - Condition: container_memory_usage_bytes > 85%
   - Dur√©e: > 10 minutes
   - Action: Investigation memory leak

6. Slow Response Time
   - Condition: http_request_duration_seconds{quantile="0.95"} > 2s
   - Dur√©e: > 5 minutes
   - Action: Analyse performance

Alertes warning (Priority: P3):

7. Pod Not Ready
   - Condition: kube_pod_status_ready{condition="false"} == 1
   - Dur√©e: > 3 minutes
   - Action: Surveillance

8. High Network Traffic
   - Condition: rate(container_network_receive_bytes_total[5m]) > seuil
   - Dur√©e: > 10 minutes
   - Action: Investigation

9. Disk Space Low (si applicable)
   - Condition: node_filesystem_avail_bytes < 20%
   - Dur√©e: > 5 minutes
   - Action: Nettoyage planifi√©

Configuration des alertes:
- Fichier: k8s/monitoring/prometheus-config.yaml
- R√®gles d'alerte Prometheus
- Int√©gration possible: Slack, Email, PagerDuty


================================================================================
CONFIGURATIONS CL√âS DU PROJET
================================================================================

1. Jenkinsfile
   - Localisation: D:\DevOps\Projet-S3\Jenkinsfile
   - Pipeline multi-stage avec d√©ploiement automatique
   - Int√©gration Docker Hub et Kubernetes

2. Dockerfile
   - Localisation: D:\DevOps\Projet-S3\Dockerfile
   - Image Tomcat 10.1 avec JDK 21
   - Application d√©ploy√©e comme ROOT.war

3. Kubernetes Manifests
   - deployment.yaml: 3 replicas, image Docker Hub
   - service.yaml: NodePort 30081
   - ingress.yaml: Configuration Ingress

4. Monitoring Stack
   - prometheus-config.yaml: Configuration et scrape configs
   - prometheus-deployment.yaml: D√©ploiement Prometheus
   - grafana-deployment.yaml: D√©ploiement Grafana avec dashboard
   - sonarqube-deployment.yaml: SonarQube pour analyse qualit√©

5. Scripts utilitaires
   - run-sonar-analysis.ps1: Script PowerShell pour analyse SonarQube
   - import-grafana-dashboard.bat: Import automatique du dashboard


================================================================================
COMMANDES UTILES
================================================================================

Git:
  git clone https://github.com/BABAYAGA-5/Projet-S3
  git log --oneline --graph
  git push origin main

Maven:
  mvn clean package
  mvn test
  mvn -version

Docker:
  docker build -t babayaga0/projet-s3:latest .
  docker push babayaga0/projet-s3:latest
  docker run -p 8080:8080 babayaga0/projet-s3:latest

Kubernetes:
  kubectl apply -f k8s/
  kubectl get all
  kubectl get pods -l app=projet-s3
  kubectl logs <pod-name>
  kubectl describe pod <pod-name>
  kubectl port-forward svc/grafana 3000:3000

Minikube:
  minikube start
  minikube status
  minikube service list
  minikube service projet-s3 --url
  minikube dashboard

SonarQube:
  cd D:\DevOps\Projet-S3
  .\run-sonar-analysis.ps1


================================================================================
CONCLUSION
================================================================================

Ce projet DevOps complet d√©montre:
‚úÖ Gestion de code source avec Git/GitHub
‚úÖ Pipeline CI/CD automatis√© avec Jenkins
‚úÖ Analyse qualit√© de code avec SonarQube
‚úÖ Containerisation avec Docker
‚úÖ Orchestration avec Kubernetes
‚úÖ Monitoring avec Prometheus et Grafana

Technologies utilis√©es:
- Java 21 / JEE
- Maven
- Docker & Docker Hub
- Kubernetes (Minikube)
- Jenkins
- SonarQube
- Prometheus
- Grafana
- Git/GitHub

Le projet est enti√®rement fonctionnel et d√©ploy√© avec succ√®s.

================================================================================
FIN DU DOCUMENT
================================================================================
